/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = 0;
pub const FP_INFINITE: _bindgen_ty_1 = 1;
pub const FP_ZERO: _bindgen_ty_1 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const READSTAT_HANDLER_OK: _bindgen_ty_2 = 0;
pub const READSTAT_HANDLER_ABORT: _bindgen_ty_2 = 1;
pub const READSTAT_HANDLER_SKIP_VARIABLE: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const readstat_type_e_READSTAT_TYPE_STRING: readstat_type_e = 0;
pub const readstat_type_e_READSTAT_TYPE_INT8: readstat_type_e = 1;
pub const readstat_type_e_READSTAT_TYPE_INT16: readstat_type_e = 2;
pub const readstat_type_e_READSTAT_TYPE_INT32: readstat_type_e = 3;
pub const readstat_type_e_READSTAT_TYPE_FLOAT: readstat_type_e = 4;
pub const readstat_type_e_READSTAT_TYPE_DOUBLE: readstat_type_e = 5;
pub const readstat_type_e_READSTAT_TYPE_STRING_REF: readstat_type_e = 6;
pub type readstat_type_e = ::std::os::raw::c_uint;
pub use self::readstat_type_e as readstat_type_t;
pub const readstat_type_class_e_READSTAT_TYPE_CLASS_STRING: readstat_type_class_e = 0;
pub const readstat_type_class_e_READSTAT_TYPE_CLASS_NUMERIC: readstat_type_class_e = 1;
pub type readstat_type_class_e = ::std::os::raw::c_uint;
pub use self::readstat_type_class_e as readstat_type_class_t;
pub const readstat_measure_e_READSTAT_MEASURE_UNKNOWN: readstat_measure_e = 0;
pub const readstat_measure_e_READSTAT_MEASURE_NOMINAL: readstat_measure_e = 1;
pub const readstat_measure_e_READSTAT_MEASURE_ORDINAL: readstat_measure_e = 2;
pub const readstat_measure_e_READSTAT_MEASURE_SCALE: readstat_measure_e = 3;
pub type readstat_measure_e = ::std::os::raw::c_uint;
pub use self::readstat_measure_e as readstat_measure_t;
pub const readstat_alignment_e_READSTAT_ALIGNMENT_UNKNOWN: readstat_alignment_e = 0;
pub const readstat_alignment_e_READSTAT_ALIGNMENT_LEFT: readstat_alignment_e = 1;
pub const readstat_alignment_e_READSTAT_ALIGNMENT_CENTER: readstat_alignment_e = 2;
pub const readstat_alignment_e_READSTAT_ALIGNMENT_RIGHT: readstat_alignment_e = 3;
pub type readstat_alignment_e = ::std::os::raw::c_uint;
pub use self::readstat_alignment_e as readstat_alignment_t;
pub const readstat_compress_e_READSTAT_COMPRESS_NONE: readstat_compress_e = 0;
pub const readstat_compress_e_READSTAT_COMPRESS_ROWS: readstat_compress_e = 1;
pub const readstat_compress_e_READSTAT_COMPRESS_BINARY: readstat_compress_e = 2;
pub type readstat_compress_e = ::std::os::raw::c_uint;
pub use self::readstat_compress_e as readstat_compress_t;
pub const readstat_endian_e_READSTAT_ENDIAN_NONE: readstat_endian_e = 0;
pub const readstat_endian_e_READSTAT_ENDIAN_LITTLE: readstat_endian_e = 1;
pub const readstat_endian_e_READSTAT_ENDIAN_BIG: readstat_endian_e = 2;
pub type readstat_endian_e = ::std::os::raw::c_uint;
pub use self::readstat_endian_e as readstat_endian_t;
pub const readstat_error_e_READSTAT_OK: readstat_error_e = 0;
pub const readstat_error_e_READSTAT_ERROR_OPEN: readstat_error_e = 1;
pub const readstat_error_e_READSTAT_ERROR_READ: readstat_error_e = 2;
pub const readstat_error_e_READSTAT_ERROR_MALLOC: readstat_error_e = 3;
pub const readstat_error_e_READSTAT_ERROR_USER_ABORT: readstat_error_e = 4;
pub const readstat_error_e_READSTAT_ERROR_PARSE: readstat_error_e = 5;
pub const readstat_error_e_READSTAT_ERROR_UNSUPPORTED_COMPRESSION: readstat_error_e = 6;
pub const readstat_error_e_READSTAT_ERROR_UNSUPPORTED_CHARSET: readstat_error_e = 7;
pub const readstat_error_e_READSTAT_ERROR_COLUMN_COUNT_MISMATCH: readstat_error_e = 8;
pub const readstat_error_e_READSTAT_ERROR_ROW_COUNT_MISMATCH: readstat_error_e = 9;
pub const readstat_error_e_READSTAT_ERROR_ROW_WIDTH_MISMATCH: readstat_error_e = 10;
pub const readstat_error_e_READSTAT_ERROR_BAD_FORMAT_STRING: readstat_error_e = 11;
pub const readstat_error_e_READSTAT_ERROR_VALUE_TYPE_MISMATCH: readstat_error_e = 12;
pub const readstat_error_e_READSTAT_ERROR_WRITE: readstat_error_e = 13;
pub const readstat_error_e_READSTAT_ERROR_WRITER_NOT_INITIALIZED: readstat_error_e = 14;
pub const readstat_error_e_READSTAT_ERROR_SEEK: readstat_error_e = 15;
pub const readstat_error_e_READSTAT_ERROR_CONVERT: readstat_error_e = 16;
pub const readstat_error_e_READSTAT_ERROR_CONVERT_BAD_STRING: readstat_error_e = 17;
pub const readstat_error_e_READSTAT_ERROR_CONVERT_SHORT_STRING: readstat_error_e = 18;
pub const readstat_error_e_READSTAT_ERROR_CONVERT_LONG_STRING: readstat_error_e = 19;
pub const readstat_error_e_READSTAT_ERROR_NUMERIC_VALUE_IS_OUT_OF_RANGE: readstat_error_e = 20;
pub const readstat_error_e_READSTAT_ERROR_TAGGED_VALUE_IS_OUT_OF_RANGE: readstat_error_e = 21;
pub const readstat_error_e_READSTAT_ERROR_STRING_VALUE_IS_TOO_LONG: readstat_error_e = 22;
pub const readstat_error_e_READSTAT_ERROR_TAGGED_VALUES_NOT_SUPPORTED: readstat_error_e = 23;
pub const readstat_error_e_READSTAT_ERROR_UNSUPPORTED_FILE_FORMAT_VERSION: readstat_error_e = 24;
pub const readstat_error_e_READSTAT_ERROR_NAME_BEGINS_WITH_ILLEGAL_CHARACTER: readstat_error_e = 25;
pub const readstat_error_e_READSTAT_ERROR_NAME_CONTAINS_ILLEGAL_CHARACTER: readstat_error_e = 26;
pub const readstat_error_e_READSTAT_ERROR_NAME_IS_RESERVED_WORD: readstat_error_e = 27;
pub const readstat_error_e_READSTAT_ERROR_NAME_IS_TOO_LONG: readstat_error_e = 28;
pub const readstat_error_e_READSTAT_ERROR_BAD_TIMESTAMP_STRING: readstat_error_e = 29;
pub const readstat_error_e_READSTAT_ERROR_BAD_FREQUENCY_WEIGHT: readstat_error_e = 30;
pub const readstat_error_e_READSTAT_ERROR_TOO_MANY_MISSING_VALUE_DEFINITIONS: readstat_error_e = 31;
pub const readstat_error_e_READSTAT_ERROR_NOTE_IS_TOO_LONG: readstat_error_e = 32;
pub const readstat_error_e_READSTAT_ERROR_STRING_REFS_NOT_SUPPORTED: readstat_error_e = 33;
pub const readstat_error_e_READSTAT_ERROR_STRING_REF_IS_REQUIRED: readstat_error_e = 34;
pub const readstat_error_e_READSTAT_ERROR_ROW_IS_TOO_WIDE_FOR_PAGE: readstat_error_e = 35;
pub const readstat_error_e_READSTAT_ERROR_TOO_FEW_COLUMNS: readstat_error_e = 36;
pub const readstat_error_e_READSTAT_ERROR_TOO_MANY_COLUMNS: readstat_error_e = 37;
pub const readstat_error_e_READSTAT_ERROR_NAME_IS_ZERO_LENGTH: readstat_error_e = 38;
pub const readstat_error_e_READSTAT_ERROR_BAD_TIMESTAMP_VALUE: readstat_error_e = 39;
pub const readstat_error_e_READSTAT_ERROR_BAD_MR_STRING: readstat_error_e = 40;
pub type readstat_error_e = ::std::os::raw::c_uint;
pub use self::readstat_error_e as readstat_error_t;
extern "C" {
    pub fn readstat_error_message(error_code: readstat_error_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mr_set_s {
    pub type_: ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub is_dichotomy: ::std::os::raw::c_int,
    pub counted_value: ::std::os::raw::c_int,
    pub subvariables: *mut *mut ::std::os::raw::c_char,
    pub num_subvars: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mr_set_s"][::std::mem::size_of::<mr_set_s>() - 48usize];
    ["Alignment of mr_set_s"][::std::mem::align_of::<mr_set_s>() - 8usize];
    ["Offset of field: mr_set_s::type_"][::std::mem::offset_of!(mr_set_s, type_) - 0usize];
    ["Offset of field: mr_set_s::name"][::std::mem::offset_of!(mr_set_s, name) - 8usize];
    ["Offset of field: mr_set_s::label"][::std::mem::offset_of!(mr_set_s, label) - 16usize];
    ["Offset of field: mr_set_s::is_dichotomy"]
        [::std::mem::offset_of!(mr_set_s, is_dichotomy) - 24usize];
    ["Offset of field: mr_set_s::counted_value"]
        [::std::mem::offset_of!(mr_set_s, counted_value) - 28usize];
    ["Offset of field: mr_set_s::subvariables"]
        [::std::mem::offset_of!(mr_set_s, subvariables) - 32usize];
    ["Offset of field: mr_set_s::num_subvars"]
        [::std::mem::offset_of!(mr_set_s, num_subvars) - 40usize];
};
pub type mr_set_t = mr_set_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_metadata_s {
    pub row_count: i64,
    pub var_count: i64,
    pub creation_time: time_t,
    pub modified_time: time_t,
    pub file_format_version: i64,
    pub compression: readstat_compress_t,
    pub endianness: readstat_endian_t,
    pub table_name: *const ::std::os::raw::c_char,
    pub file_label: *const ::std::os::raw::c_char,
    pub file_encoding: *const ::std::os::raw::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub multiple_response_sets_length: usize,
    pub mr_sets: *mut mr_set_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_metadata_s"][::std::mem::size_of::<readstat_metadata_s>() - 96usize];
    ["Alignment of readstat_metadata_s"][::std::mem::align_of::<readstat_metadata_s>() - 8usize];
    ["Offset of field: readstat_metadata_s::row_count"]
        [::std::mem::offset_of!(readstat_metadata_s, row_count) - 0usize];
    ["Offset of field: readstat_metadata_s::var_count"]
        [::std::mem::offset_of!(readstat_metadata_s, var_count) - 8usize];
    ["Offset of field: readstat_metadata_s::creation_time"]
        [::std::mem::offset_of!(readstat_metadata_s, creation_time) - 16usize];
    ["Offset of field: readstat_metadata_s::modified_time"]
        [::std::mem::offset_of!(readstat_metadata_s, modified_time) - 24usize];
    ["Offset of field: readstat_metadata_s::file_format_version"]
        [::std::mem::offset_of!(readstat_metadata_s, file_format_version) - 32usize];
    ["Offset of field: readstat_metadata_s::compression"]
        [::std::mem::offset_of!(readstat_metadata_s, compression) - 40usize];
    ["Offset of field: readstat_metadata_s::endianness"]
        [::std::mem::offset_of!(readstat_metadata_s, endianness) - 44usize];
    ["Offset of field: readstat_metadata_s::table_name"]
        [::std::mem::offset_of!(readstat_metadata_s, table_name) - 48usize];
    ["Offset of field: readstat_metadata_s::file_label"]
        [::std::mem::offset_of!(readstat_metadata_s, file_label) - 56usize];
    ["Offset of field: readstat_metadata_s::file_encoding"]
        [::std::mem::offset_of!(readstat_metadata_s, file_encoding) - 64usize];
    ["Offset of field: readstat_metadata_s::multiple_response_sets_length"]
        [::std::mem::offset_of!(readstat_metadata_s, multiple_response_sets_length) - 80usize];
    ["Offset of field: readstat_metadata_s::mr_sets"]
        [::std::mem::offset_of!(readstat_metadata_s, mr_sets) - 88usize];
};
impl readstat_metadata_s {
    #[inline]
    pub fn is64bit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is64bit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(is64bit: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is64bit: u32 = unsafe { ::std::mem::transmute(is64bit) };
            is64bit as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type readstat_metadata_t = readstat_metadata_s;
extern "C" {
    pub fn readstat_get_row_count(metadata: *mut readstat_metadata_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_get_var_count(metadata: *mut readstat_metadata_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_get_creation_time(metadata: *mut readstat_metadata_t) -> time_t;
}
extern "C" {
    pub fn readstat_get_modified_time(metadata: *mut readstat_metadata_t) -> time_t;
}
extern "C" {
    pub fn readstat_get_file_format_version(
        metadata: *mut readstat_metadata_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_get_file_format_is_64bit(
        metadata: *mut readstat_metadata_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_get_compression(metadata: *mut readstat_metadata_t) -> readstat_compress_t;
}
extern "C" {
    pub fn readstat_get_endianness(metadata: *mut readstat_metadata_t) -> readstat_endian_t;
}
extern "C" {
    pub fn readstat_get_table_name(
        metadata: *mut readstat_metadata_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_get_file_label(
        metadata: *mut readstat_metadata_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_get_file_encoding(
        metadata: *mut readstat_metadata_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_get_multiple_response_sets(
        metadata: *mut readstat_metadata_t,
    ) -> *const mr_set_t;
}
extern "C" {
    pub fn readstat_get_multiple_response_sets_length(metadata: *mut readstat_metadata_t) -> usize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct readstat_value_s {
    pub v: readstat_value_s__bindgen_ty_1,
    pub type_: readstat_type_t,
    pub tag: ::std::os::raw::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union readstat_value_s__bindgen_ty_1 {
    pub float_value: f32,
    pub double_value: f64,
    pub i8_value: i8,
    pub i16_value: i16,
    pub i32_value: i32,
    pub string_value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_value_s__bindgen_ty_1"]
        [::std::mem::size_of::<readstat_value_s__bindgen_ty_1>() - 8usize];
    ["Alignment of readstat_value_s__bindgen_ty_1"]
        [::std::mem::align_of::<readstat_value_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: readstat_value_s__bindgen_ty_1::float_value"]
        [::std::mem::offset_of!(readstat_value_s__bindgen_ty_1, float_value) - 0usize];
    ["Offset of field: readstat_value_s__bindgen_ty_1::double_value"]
        [::std::mem::offset_of!(readstat_value_s__bindgen_ty_1, double_value) - 0usize];
    ["Offset of field: readstat_value_s__bindgen_ty_1::i8_value"]
        [::std::mem::offset_of!(readstat_value_s__bindgen_ty_1, i8_value) - 0usize];
    ["Offset of field: readstat_value_s__bindgen_ty_1::i16_value"]
        [::std::mem::offset_of!(readstat_value_s__bindgen_ty_1, i16_value) - 0usize];
    ["Offset of field: readstat_value_s__bindgen_ty_1::i32_value"]
        [::std::mem::offset_of!(readstat_value_s__bindgen_ty_1, i32_value) - 0usize];
    ["Offset of field: readstat_value_s__bindgen_ty_1::string_value"]
        [::std::mem::offset_of!(readstat_value_s__bindgen_ty_1, string_value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_value_s"][::std::mem::size_of::<readstat_value_s>() - 16usize];
    ["Alignment of readstat_value_s"][::std::mem::align_of::<readstat_value_s>() - 8usize];
    ["Offset of field: readstat_value_s::v"][::std::mem::offset_of!(readstat_value_s, v) - 0usize];
    ["Offset of field: readstat_value_s::type_"]
        [::std::mem::offset_of!(readstat_value_s, type_) - 8usize];
    ["Offset of field: readstat_value_s::tag"]
        [::std::mem::offset_of!(readstat_value_s, tag) - 12usize];
};
impl readstat_value_s {
    #[inline]
    pub fn is_system_missing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_system_missing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_tagged_missing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_tagged_missing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_system_missing: ::std::os::raw::c_uint,
        is_tagged_missing: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_system_missing: u32 = unsafe { ::std::mem::transmute(is_system_missing) };
            is_system_missing as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_tagged_missing: u32 = unsafe { ::std::mem::transmute(is_tagged_missing) };
            is_tagged_missing as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type readstat_value_t = readstat_value_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_value_label_s {
    pub double_key: f64,
    pub int32_key: i32,
    pub tag: ::std::os::raw::c_char,
    pub string_key: *mut ::std::os::raw::c_char,
    pub string_key_len: usize,
    pub label: *mut ::std::os::raw::c_char,
    pub label_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_value_label_s"][::std::mem::size_of::<readstat_value_label_s>() - 48usize];
    ["Alignment of readstat_value_label_s"]
        [::std::mem::align_of::<readstat_value_label_s>() - 8usize];
    ["Offset of field: readstat_value_label_s::double_key"]
        [::std::mem::offset_of!(readstat_value_label_s, double_key) - 0usize];
    ["Offset of field: readstat_value_label_s::int32_key"]
        [::std::mem::offset_of!(readstat_value_label_s, int32_key) - 8usize];
    ["Offset of field: readstat_value_label_s::tag"]
        [::std::mem::offset_of!(readstat_value_label_s, tag) - 12usize];
    ["Offset of field: readstat_value_label_s::string_key"]
        [::std::mem::offset_of!(readstat_value_label_s, string_key) - 16usize];
    ["Offset of field: readstat_value_label_s::string_key_len"]
        [::std::mem::offset_of!(readstat_value_label_s, string_key_len) - 24usize];
    ["Offset of field: readstat_value_label_s::label"]
        [::std::mem::offset_of!(readstat_value_label_s, label) - 32usize];
    ["Offset of field: readstat_value_label_s::label_len"]
        [::std::mem::offset_of!(readstat_value_label_s, label_len) - 40usize];
};
pub type readstat_value_label_t = readstat_value_label_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_label_set_s {
    pub type_: readstat_type_t,
    pub name: [::std::os::raw::c_char; 256usize],
    pub value_labels: *mut readstat_value_label_t,
    pub value_labels_count: ::std::os::raw::c_long,
    pub value_labels_capacity: ::std::os::raw::c_long,
    pub variables: *mut ::std::os::raw::c_void,
    pub variables_count: ::std::os::raw::c_long,
    pub variables_capacity: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_label_set_s"][::std::mem::size_of::<readstat_label_set_s>() - 312usize];
    ["Alignment of readstat_label_set_s"][::std::mem::align_of::<readstat_label_set_s>() - 8usize];
    ["Offset of field: readstat_label_set_s::type_"]
        [::std::mem::offset_of!(readstat_label_set_s, type_) - 0usize];
    ["Offset of field: readstat_label_set_s::name"]
        [::std::mem::offset_of!(readstat_label_set_s, name) - 4usize];
    ["Offset of field: readstat_label_set_s::value_labels"]
        [::std::mem::offset_of!(readstat_label_set_s, value_labels) - 264usize];
    ["Offset of field: readstat_label_set_s::value_labels_count"]
        [::std::mem::offset_of!(readstat_label_set_s, value_labels_count) - 272usize];
    ["Offset of field: readstat_label_set_s::value_labels_capacity"]
        [::std::mem::offset_of!(readstat_label_set_s, value_labels_capacity) - 280usize];
    ["Offset of field: readstat_label_set_s::variables"]
        [::std::mem::offset_of!(readstat_label_set_s, variables) - 288usize];
    ["Offset of field: readstat_label_set_s::variables_count"]
        [::std::mem::offset_of!(readstat_label_set_s, variables_count) - 296usize];
    ["Offset of field: readstat_label_set_s::variables_capacity"]
        [::std::mem::offset_of!(readstat_label_set_s, variables_capacity) - 304usize];
};
pub type readstat_label_set_t = readstat_label_set_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct readstat_missingness_s {
    pub missing_ranges: [readstat_value_t; 32usize],
    pub missing_ranges_count: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_missingness_s"][::std::mem::size_of::<readstat_missingness_s>() - 520usize];
    ["Alignment of readstat_missingness_s"]
        [::std::mem::align_of::<readstat_missingness_s>() - 8usize];
    ["Offset of field: readstat_missingness_s::missing_ranges"]
        [::std::mem::offset_of!(readstat_missingness_s, missing_ranges) - 0usize];
    ["Offset of field: readstat_missingness_s::missing_ranges_count"]
        [::std::mem::offset_of!(readstat_missingness_s, missing_ranges_count) - 512usize];
};
pub type readstat_missingness_t = readstat_missingness_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct readstat_variable_s {
    pub type_: readstat_type_t,
    pub index: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 300usize],
    pub format: [::std::os::raw::c_char; 256usize],
    pub label: [::std::os::raw::c_char; 1024usize],
    pub label_set: *mut readstat_label_set_t,
    pub offset: off_t,
    pub storage_width: usize,
    pub user_width: usize,
    pub missingness: readstat_missingness_t,
    pub measure: readstat_measure_t,
    pub alignment: readstat_alignment_t,
    pub display_width: ::std::os::raw::c_int,
    pub decimals: ::std::os::raw::c_int,
    pub skip: ::std::os::raw::c_int,
    pub index_after_skipping: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_variable_s"][::std::mem::size_of::<readstat_variable_s>() - 2168usize];
    ["Alignment of readstat_variable_s"][::std::mem::align_of::<readstat_variable_s>() - 8usize];
    ["Offset of field: readstat_variable_s::type_"]
        [::std::mem::offset_of!(readstat_variable_s, type_) - 0usize];
    ["Offset of field: readstat_variable_s::index"]
        [::std::mem::offset_of!(readstat_variable_s, index) - 4usize];
    ["Offset of field: readstat_variable_s::name"]
        [::std::mem::offset_of!(readstat_variable_s, name) - 8usize];
    ["Offset of field: readstat_variable_s::format"]
        [::std::mem::offset_of!(readstat_variable_s, format) - 308usize];
    ["Offset of field: readstat_variable_s::label"]
        [::std::mem::offset_of!(readstat_variable_s, label) - 564usize];
    ["Offset of field: readstat_variable_s::label_set"]
        [::std::mem::offset_of!(readstat_variable_s, label_set) - 1592usize];
    ["Offset of field: readstat_variable_s::offset"]
        [::std::mem::offset_of!(readstat_variable_s, offset) - 1600usize];
    ["Offset of field: readstat_variable_s::storage_width"]
        [::std::mem::offset_of!(readstat_variable_s, storage_width) - 1608usize];
    ["Offset of field: readstat_variable_s::user_width"]
        [::std::mem::offset_of!(readstat_variable_s, user_width) - 1616usize];
    ["Offset of field: readstat_variable_s::missingness"]
        [::std::mem::offset_of!(readstat_variable_s, missingness) - 1624usize];
    ["Offset of field: readstat_variable_s::measure"]
        [::std::mem::offset_of!(readstat_variable_s, measure) - 2144usize];
    ["Offset of field: readstat_variable_s::alignment"]
        [::std::mem::offset_of!(readstat_variable_s, alignment) - 2148usize];
    ["Offset of field: readstat_variable_s::display_width"]
        [::std::mem::offset_of!(readstat_variable_s, display_width) - 2152usize];
    ["Offset of field: readstat_variable_s::decimals"]
        [::std::mem::offset_of!(readstat_variable_s, decimals) - 2156usize];
    ["Offset of field: readstat_variable_s::skip"]
        [::std::mem::offset_of!(readstat_variable_s, skip) - 2160usize];
    ["Offset of field: readstat_variable_s::index_after_skipping"]
        [::std::mem::offset_of!(readstat_variable_s, index_after_skipping) - 2164usize];
};
pub type readstat_variable_t = readstat_variable_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct readstat_schema_entry_s {
    pub row: u32,
    pub col: u32,
    pub len: u32,
    pub skip: ::std::os::raw::c_int,
    pub variable: readstat_variable_t,
    pub labelset: [::std::os::raw::c_char; 32usize],
    pub decimal_separator: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_schema_entry_s"]
        [::std::mem::size_of::<readstat_schema_entry_s>() - 2224usize];
    ["Alignment of readstat_schema_entry_s"]
        [::std::mem::align_of::<readstat_schema_entry_s>() - 8usize];
    ["Offset of field: readstat_schema_entry_s::row"]
        [::std::mem::offset_of!(readstat_schema_entry_s, row) - 0usize];
    ["Offset of field: readstat_schema_entry_s::col"]
        [::std::mem::offset_of!(readstat_schema_entry_s, col) - 4usize];
    ["Offset of field: readstat_schema_entry_s::len"]
        [::std::mem::offset_of!(readstat_schema_entry_s, len) - 8usize];
    ["Offset of field: readstat_schema_entry_s::skip"]
        [::std::mem::offset_of!(readstat_schema_entry_s, skip) - 12usize];
    ["Offset of field: readstat_schema_entry_s::variable"]
        [::std::mem::offset_of!(readstat_schema_entry_s, variable) - 16usize];
    ["Offset of field: readstat_schema_entry_s::labelset"]
        [::std::mem::offset_of!(readstat_schema_entry_s, labelset) - 2184usize];
    ["Offset of field: readstat_schema_entry_s::decimal_separator"]
        [::std::mem::offset_of!(readstat_schema_entry_s, decimal_separator) - 2216usize];
};
pub type readstat_schema_entry_t = readstat_schema_entry_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_schema_s {
    pub filename: [::std::os::raw::c_char; 255usize],
    pub rows_per_observation: u32,
    pub cols_per_observation: u32,
    pub first_line: ::std::os::raw::c_int,
    pub entry_count: ::std::os::raw::c_int,
    pub field_delimiter: ::std::os::raw::c_char,
    pub entries: *mut readstat_schema_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_schema_s"][::std::mem::size_of::<readstat_schema_s>() - 288usize];
    ["Alignment of readstat_schema_s"][::std::mem::align_of::<readstat_schema_s>() - 8usize];
    ["Offset of field: readstat_schema_s::filename"]
        [::std::mem::offset_of!(readstat_schema_s, filename) - 0usize];
    ["Offset of field: readstat_schema_s::rows_per_observation"]
        [::std::mem::offset_of!(readstat_schema_s, rows_per_observation) - 256usize];
    ["Offset of field: readstat_schema_s::cols_per_observation"]
        [::std::mem::offset_of!(readstat_schema_s, cols_per_observation) - 260usize];
    ["Offset of field: readstat_schema_s::first_line"]
        [::std::mem::offset_of!(readstat_schema_s, first_line) - 264usize];
    ["Offset of field: readstat_schema_s::entry_count"]
        [::std::mem::offset_of!(readstat_schema_s, entry_count) - 268usize];
    ["Offset of field: readstat_schema_s::field_delimiter"]
        [::std::mem::offset_of!(readstat_schema_s, field_delimiter) - 272usize];
    ["Offset of field: readstat_schema_s::entries"]
        [::std::mem::offset_of!(readstat_schema_s, entries) - 280usize];
};
pub type readstat_schema_t = readstat_schema_s;
extern "C" {
    pub fn readstat_value_type(value: readstat_value_t) -> readstat_type_t;
}
extern "C" {
    pub fn readstat_value_type_class(value: readstat_value_t) -> readstat_type_class_t;
}
extern "C" {
    pub fn readstat_value_is_missing(
        value: readstat_value_t,
        variable: *mut readstat_variable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_value_is_system_missing(value: readstat_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_value_is_tagged_missing(value: readstat_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_value_is_defined_missing(
        value: readstat_value_t,
        variable: *mut readstat_variable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_value_tag(value: readstat_value_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_int8_value(value: readstat_value_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_int16_value(value: readstat_value_t) -> i16;
}
extern "C" {
    pub fn readstat_int32_value(value: readstat_value_t) -> i32;
}
extern "C" {
    pub fn readstat_float_value(value: readstat_value_t) -> f32;
}
extern "C" {
    pub fn readstat_double_value(value: readstat_value_t) -> f64;
}
extern "C" {
    pub fn readstat_string_value(value: readstat_value_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_type_class(type_: readstat_type_t) -> readstat_type_class_t;
}
extern "C" {
    pub fn readstat_variable_get_index(
        variable: *const readstat_variable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_variable_get_index_after_skipping(
        variable: *const readstat_variable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_variable_get_name(
        variable: *const readstat_variable_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_variable_get_label(
        variable: *const readstat_variable_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_variable_get_format(
        variable: *const readstat_variable_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn readstat_variable_get_type(variable: *const readstat_variable_t) -> readstat_type_t;
}
extern "C" {
    pub fn readstat_variable_get_type_class(
        variable: *const readstat_variable_t,
    ) -> readstat_type_class_t;
}
extern "C" {
    pub fn readstat_variable_get_storage_width(variable: *const readstat_variable_t) -> usize;
}
extern "C" {
    pub fn readstat_variable_get_display_width(
        variable: *const readstat_variable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_variable_get_measure(
        variable: *const readstat_variable_t,
    ) -> readstat_measure_t;
}
extern "C" {
    pub fn readstat_variable_get_alignment(
        variable: *const readstat_variable_t,
    ) -> readstat_alignment_t;
}
extern "C" {
    pub fn readstat_variable_get_missing_ranges_count(
        variable: *const readstat_variable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readstat_variable_get_missing_range_lo(
        variable: *const readstat_variable_t,
        i: ::std::os::raw::c_int,
    ) -> readstat_value_t;
}
extern "C" {
    pub fn readstat_variable_get_missing_range_hi(
        variable: *const readstat_variable_t,
        i: ::std::os::raw::c_int,
    ) -> readstat_value_t;
}
pub type readstat_metadata_handler = ::std::option::Option<
    unsafe extern "C" fn(
        metadata: *mut readstat_metadata_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_note_handler = ::std::option::Option<
    unsafe extern "C" fn(
        note_index: ::std::os::raw::c_int,
        note: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_variable_handler = ::std::option::Option<
    unsafe extern "C" fn(
        index: ::std::os::raw::c_int,
        variable: *mut readstat_variable_t,
        val_labels: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_fweight_handler = ::std::option::Option<
    unsafe extern "C" fn(
        variable: *mut readstat_variable_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_value_handler = ::std::option::Option<
    unsafe extern "C" fn(
        obs_index: ::std::os::raw::c_int,
        variable: *mut readstat_variable_t,
        value: readstat_value_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_value_label_handler = ::std::option::Option<
    unsafe extern "C" fn(
        val_labels: *const ::std::os::raw::c_char,
        value: readstat_value_t,
        label: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_error_handler = ::std::option::Option<
    unsafe extern "C" fn(
        error_message: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub type readstat_progress_handler = ::std::option::Option<
    unsafe extern "C" fn(progress: f64, ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type readstat_off_t = off_t;
pub const readstat_io_flags_e_READSTAT_SEEK_SET: readstat_io_flags_e = 0;
pub const readstat_io_flags_e_READSTAT_SEEK_CUR: readstat_io_flags_e = 1;
pub const readstat_io_flags_e_READSTAT_SEEK_END: readstat_io_flags_e = 2;
pub type readstat_io_flags_e = ::std::os::raw::c_uint;
pub use self::readstat_io_flags_e as readstat_io_flags_t;
pub type readstat_open_handler = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const ::std::os::raw::c_char,
        io_ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type readstat_close_handler = ::std::option::Option<
    unsafe extern "C" fn(io_ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type readstat_seek_handler = ::std::option::Option<
    unsafe extern "C" fn(
        offset: readstat_off_t,
        whence: readstat_io_flags_t,
        io_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_off_t,
>;
pub type readstat_read_handler = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_void,
        nbyte: usize,
        io_ctx: *mut ::std::os::raw::c_void,
    ) -> isize,
>;
pub type readstat_update_handler = ::std::option::Option<
    unsafe extern "C" fn(
        file_size: ::std::os::raw::c_long,
        progress_handler: readstat_progress_handler,
        user_ctx: *mut ::std::os::raw::c_void,
        io_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_io_s {
    pub open: readstat_open_handler,
    pub close: readstat_close_handler,
    pub seek: readstat_seek_handler,
    pub read: readstat_read_handler,
    pub update: readstat_update_handler,
    pub io_ctx: *mut ::std::os::raw::c_void,
    pub io_ctx_needs_free: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_io_s"][::std::mem::size_of::<readstat_io_s>() - 56usize];
    ["Alignment of readstat_io_s"][::std::mem::align_of::<readstat_io_s>() - 8usize];
    ["Offset of field: readstat_io_s::open"][::std::mem::offset_of!(readstat_io_s, open) - 0usize];
    ["Offset of field: readstat_io_s::close"]
        [::std::mem::offset_of!(readstat_io_s, close) - 8usize];
    ["Offset of field: readstat_io_s::seek"][::std::mem::offset_of!(readstat_io_s, seek) - 16usize];
    ["Offset of field: readstat_io_s::read"][::std::mem::offset_of!(readstat_io_s, read) - 24usize];
    ["Offset of field: readstat_io_s::update"]
        [::std::mem::offset_of!(readstat_io_s, update) - 32usize];
    ["Offset of field: readstat_io_s::io_ctx"]
        [::std::mem::offset_of!(readstat_io_s, io_ctx) - 40usize];
    ["Offset of field: readstat_io_s::io_ctx_needs_free"]
        [::std::mem::offset_of!(readstat_io_s, io_ctx_needs_free) - 48usize];
};
pub type readstat_io_t = readstat_io_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_callbacks_s {
    pub metadata: readstat_metadata_handler,
    pub note: readstat_note_handler,
    pub variable: readstat_variable_handler,
    pub fweight: readstat_fweight_handler,
    pub value: readstat_value_handler,
    pub value_label: readstat_value_label_handler,
    pub error: readstat_error_handler,
    pub progress: readstat_progress_handler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_callbacks_s"][::std::mem::size_of::<readstat_callbacks_s>() - 64usize];
    ["Alignment of readstat_callbacks_s"][::std::mem::align_of::<readstat_callbacks_s>() - 8usize];
    ["Offset of field: readstat_callbacks_s::metadata"]
        [::std::mem::offset_of!(readstat_callbacks_s, metadata) - 0usize];
    ["Offset of field: readstat_callbacks_s::note"]
        [::std::mem::offset_of!(readstat_callbacks_s, note) - 8usize];
    ["Offset of field: readstat_callbacks_s::variable"]
        [::std::mem::offset_of!(readstat_callbacks_s, variable) - 16usize];
    ["Offset of field: readstat_callbacks_s::fweight"]
        [::std::mem::offset_of!(readstat_callbacks_s, fweight) - 24usize];
    ["Offset of field: readstat_callbacks_s::value"]
        [::std::mem::offset_of!(readstat_callbacks_s, value) - 32usize];
    ["Offset of field: readstat_callbacks_s::value_label"]
        [::std::mem::offset_of!(readstat_callbacks_s, value_label) - 40usize];
    ["Offset of field: readstat_callbacks_s::error"]
        [::std::mem::offset_of!(readstat_callbacks_s, error) - 48usize];
    ["Offset of field: readstat_callbacks_s::progress"]
        [::std::mem::offset_of!(readstat_callbacks_s, progress) - 56usize];
};
pub type readstat_callbacks_t = readstat_callbacks_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_parser_s {
    pub handlers: readstat_callbacks_t,
    pub io: *mut readstat_io_t,
    pub input_encoding: *const ::std::os::raw::c_char,
    pub output_encoding: *const ::std::os::raw::c_char,
    pub row_limit: ::std::os::raw::c_long,
    pub row_offset: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_parser_s"][::std::mem::size_of::<readstat_parser_s>() - 104usize];
    ["Alignment of readstat_parser_s"][::std::mem::align_of::<readstat_parser_s>() - 8usize];
    ["Offset of field: readstat_parser_s::handlers"]
        [::std::mem::offset_of!(readstat_parser_s, handlers) - 0usize];
    ["Offset of field: readstat_parser_s::io"]
        [::std::mem::offset_of!(readstat_parser_s, io) - 64usize];
    ["Offset of field: readstat_parser_s::input_encoding"]
        [::std::mem::offset_of!(readstat_parser_s, input_encoding) - 72usize];
    ["Offset of field: readstat_parser_s::output_encoding"]
        [::std::mem::offset_of!(readstat_parser_s, output_encoding) - 80usize];
    ["Offset of field: readstat_parser_s::row_limit"]
        [::std::mem::offset_of!(readstat_parser_s, row_limit) - 88usize];
    ["Offset of field: readstat_parser_s::row_offset"]
        [::std::mem::offset_of!(readstat_parser_s, row_offset) - 96usize];
};
pub type readstat_parser_t = readstat_parser_s;
extern "C" {
    pub fn readstat_parser_init() -> *mut readstat_parser_t;
}
extern "C" {
    pub fn readstat_parser_free(parser: *mut readstat_parser_t);
}
extern "C" {
    pub fn readstat_io_free(io: *mut readstat_io_t);
}
extern "C" {
    pub fn readstat_set_metadata_handler(
        parser: *mut readstat_parser_t,
        metadata_handler: readstat_metadata_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_note_handler(
        parser: *mut readstat_parser_t,
        note_handler: readstat_note_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_variable_handler(
        parser: *mut readstat_parser_t,
        variable_handler: readstat_variable_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_fweight_handler(
        parser: *mut readstat_parser_t,
        fweight_handler: readstat_fweight_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_value_handler(
        parser: *mut readstat_parser_t,
        value_handler: readstat_value_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_value_label_handler(
        parser: *mut readstat_parser_t,
        value_label_handler: readstat_value_label_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_error_handler(
        parser: *mut readstat_parser_t,
        error_handler: readstat_error_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_progress_handler(
        parser: *mut readstat_parser_t,
        progress_handler: readstat_progress_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_open_handler(
        parser: *mut readstat_parser_t,
        open_handler: readstat_open_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_close_handler(
        parser: *mut readstat_parser_t,
        close_handler: readstat_close_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_seek_handler(
        parser: *mut readstat_parser_t,
        seek_handler: readstat_seek_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_read_handler(
        parser: *mut readstat_parser_t,
        read_handler: readstat_read_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_update_handler(
        parser: *mut readstat_parser_t,
        update_handler: readstat_update_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_io_ctx(
        parser: *mut readstat_parser_t,
        io_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_file_character_encoding(
        parser: *mut readstat_parser_t,
        encoding: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_handler_character_encoding(
        parser: *mut readstat_parser_t,
        encoding: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_row_limit(
        parser: *mut readstat_parser_t,
        row_limit: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_set_row_offset(
        parser: *mut readstat_parser_t,
        row_offset: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_dta(
        parser: *mut readstat_parser_t,
        path: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_sav(
        parser: *mut readstat_parser_t,
        path: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_por(
        parser: *mut readstat_parser_t,
        path: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_sas7bdat(
        parser: *mut readstat_parser_t,
        path: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_sas7bcat(
        parser: *mut readstat_parser_t,
        path: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_xport(
        parser: *mut readstat_parser_t,
        path: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_parse_sas_commands(
        parser: *mut readstat_parser_t,
        filepath: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
        outError: *mut readstat_error_t,
    ) -> *mut readstat_schema_t;
}
extern "C" {
    pub fn readstat_parse_spss_commands(
        parser: *mut readstat_parser_t,
        filepath: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
        outError: *mut readstat_error_t,
    ) -> *mut readstat_schema_t;
}
extern "C" {
    pub fn readstat_parse_stata_dictionary(
        parser: *mut readstat_parser_t,
        filepath: *const ::std::os::raw::c_char,
        user_ctx: *mut ::std::os::raw::c_void,
        outError: *mut readstat_error_t,
    ) -> *mut readstat_schema_t;
}
extern "C" {
    pub fn readstat_parse_txt(
        parser: *mut readstat_parser_t,
        filename: *const ::std::os::raw::c_char,
        schema: *mut readstat_schema_t,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_schema_free(schema: *mut readstat_schema_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_string_ref_s {
    pub first_v: i64,
    pub first_o: i64,
    pub len: usize,
    pub data: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_string_ref_s"][::std::mem::size_of::<readstat_string_ref_s>() - 32usize];
    ["Alignment of readstat_string_ref_s"]
        [::std::mem::align_of::<readstat_string_ref_s>() - 8usize];
    ["Offset of field: readstat_string_ref_s::first_v"]
        [::std::mem::offset_of!(readstat_string_ref_s, first_v) - 0usize];
    ["Offset of field: readstat_string_ref_s::first_o"]
        [::std::mem::offset_of!(readstat_string_ref_s, first_o) - 8usize];
    ["Offset of field: readstat_string_ref_s::len"]
        [::std::mem::offset_of!(readstat_string_ref_s, len) - 16usize];
    ["Offset of field: readstat_string_ref_s::data"]
        [::std::mem::offset_of!(readstat_string_ref_s, data) - 24usize];
};
pub type readstat_string_ref_t = readstat_string_ref_s;
pub type readstat_variable_width_callback =
    ::std::option::Option<unsafe extern "C" fn(type_: readstat_type_t, user_width: usize) -> usize>;
pub type readstat_variable_ok_callback = ::std::option::Option<
    unsafe extern "C" fn(variable: *const readstat_variable_t) -> readstat_error_t,
>;
pub type readstat_write_int8_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        value: i8,
    ) -> readstat_error_t,
>;
pub type readstat_write_int16_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        value: i16,
    ) -> readstat_error_t,
>;
pub type readstat_write_int32_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        value: i32,
    ) -> readstat_error_t,
>;
pub type readstat_write_float_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        value: f32,
    ) -> readstat_error_t,
>;
pub type readstat_write_double_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        value: f64,
    ) -> readstat_error_t,
>;
pub type readstat_write_string_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        value: *const ::std::os::raw::c_char,
    ) -> readstat_error_t,
>;
pub type readstat_write_string_ref_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        ref_: *mut readstat_string_ref_t,
    ) -> readstat_error_t,
>;
pub type readstat_write_missing_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
    ) -> readstat_error_t,
>;
pub type readstat_write_tagged_callback = ::std::option::Option<
    unsafe extern "C" fn(
        row_data: *mut ::std::os::raw::c_void,
        variable: *const readstat_variable_t,
        tag: ::std::os::raw::c_char,
    ) -> readstat_error_t,
>;
pub type readstat_begin_data_callback = ::std::option::Option<
    unsafe extern "C" fn(writer: *mut ::std::os::raw::c_void) -> readstat_error_t,
>;
pub type readstat_write_row_callback = ::std::option::Option<
    unsafe extern "C" fn(
        writer: *mut ::std::os::raw::c_void,
        row_data: *mut ::std::os::raw::c_void,
        row_len: usize,
    ) -> readstat_error_t,
>;
pub type readstat_end_data_callback = ::std::option::Option<
    unsafe extern "C" fn(writer: *mut ::std::os::raw::c_void) -> readstat_error_t,
>;
pub type readstat_module_ctx_free_callback =
    ::std::option::Option<unsafe extern "C" fn(module_ctx: *mut ::std::os::raw::c_void)>;
pub type readstat_metadata_ok_callback = ::std::option::Option<
    unsafe extern "C" fn(writer: *mut ::std::os::raw::c_void) -> readstat_error_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_writer_callbacks_s {
    pub variable_width: readstat_variable_width_callback,
    pub variable_ok: readstat_variable_ok_callback,
    pub write_int8: readstat_write_int8_callback,
    pub write_int16: readstat_write_int16_callback,
    pub write_int32: readstat_write_int32_callback,
    pub write_float: readstat_write_float_callback,
    pub write_double: readstat_write_double_callback,
    pub write_string: readstat_write_string_callback,
    pub write_string_ref: readstat_write_string_ref_callback,
    pub write_missing_string: readstat_write_missing_callback,
    pub write_missing_number: readstat_write_missing_callback,
    pub write_missing_tagged: readstat_write_tagged_callback,
    pub begin_data: readstat_begin_data_callback,
    pub write_row: readstat_write_row_callback,
    pub end_data: readstat_end_data_callback,
    pub module_ctx_free: readstat_module_ctx_free_callback,
    pub metadata_ok: readstat_metadata_ok_callback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_writer_callbacks_s"]
        [::std::mem::size_of::<readstat_writer_callbacks_s>() - 136usize];
    ["Alignment of readstat_writer_callbacks_s"]
        [::std::mem::align_of::<readstat_writer_callbacks_s>() - 8usize];
    ["Offset of field: readstat_writer_callbacks_s::variable_width"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, variable_width) - 0usize];
    ["Offset of field: readstat_writer_callbacks_s::variable_ok"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, variable_ok) - 8usize];
    ["Offset of field: readstat_writer_callbacks_s::write_int8"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_int8) - 16usize];
    ["Offset of field: readstat_writer_callbacks_s::write_int16"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_int16) - 24usize];
    ["Offset of field: readstat_writer_callbacks_s::write_int32"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_int32) - 32usize];
    ["Offset of field: readstat_writer_callbacks_s::write_float"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_float) - 40usize];
    ["Offset of field: readstat_writer_callbacks_s::write_double"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_double) - 48usize];
    ["Offset of field: readstat_writer_callbacks_s::write_string"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_string) - 56usize];
    ["Offset of field: readstat_writer_callbacks_s::write_string_ref"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_string_ref) - 64usize];
    ["Offset of field: readstat_writer_callbacks_s::write_missing_string"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_missing_string) - 72usize];
    ["Offset of field: readstat_writer_callbacks_s::write_missing_number"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_missing_number) - 80usize];
    ["Offset of field: readstat_writer_callbacks_s::write_missing_tagged"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_missing_tagged) - 88usize];
    ["Offset of field: readstat_writer_callbacks_s::begin_data"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, begin_data) - 96usize];
    ["Offset of field: readstat_writer_callbacks_s::write_row"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, write_row) - 104usize];
    ["Offset of field: readstat_writer_callbacks_s::end_data"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, end_data) - 112usize];
    ["Offset of field: readstat_writer_callbacks_s::module_ctx_free"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, module_ctx_free) - 120usize];
    ["Offset of field: readstat_writer_callbacks_s::metadata_ok"]
        [::std::mem::offset_of!(readstat_writer_callbacks_s, metadata_ok) - 128usize];
};
pub type readstat_writer_callbacks_t = readstat_writer_callbacks_s;
pub type readstat_data_writer = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        len: usize,
        ctx: *mut ::std::os::raw::c_void,
    ) -> isize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readstat_writer_s {
    pub data_writer: readstat_data_writer,
    pub bytes_written: usize,
    pub version: ::std::os::raw::c_long,
    pub is_64bit: ::std::os::raw::c_int,
    pub compression: readstat_compress_t,
    pub timestamp: time_t,
    pub variables: *mut *mut readstat_variable_t,
    pub variables_count: ::std::os::raw::c_long,
    pub variables_capacity: ::std::os::raw::c_long,
    pub label_sets: *mut *mut readstat_label_set_t,
    pub label_sets_count: ::std::os::raw::c_long,
    pub label_sets_capacity: ::std::os::raw::c_long,
    pub notes: *mut *mut ::std::os::raw::c_char,
    pub notes_count: ::std::os::raw::c_long,
    pub notes_capacity: ::std::os::raw::c_long,
    pub string_refs: *mut *mut readstat_string_ref_t,
    pub string_refs_count: ::std::os::raw::c_long,
    pub string_refs_capacity: ::std::os::raw::c_long,
    pub row: *mut ::std::os::raw::c_uchar,
    pub row_len: usize,
    pub row_count: ::std::os::raw::c_int,
    pub current_row: ::std::os::raw::c_int,
    pub file_label: [::std::os::raw::c_char; 257usize],
    pub table_name: [::std::os::raw::c_char; 33usize],
    pub fweight_variable: *const readstat_variable_t,
    pub callbacks: readstat_writer_callbacks_t,
    pub error_handler: readstat_error_handler,
    pub module_ctx: *mut ::std::os::raw::c_void,
    pub user_ctx: *mut ::std::os::raw::c_void,
    pub initialized: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of readstat_writer_s"][::std::mem::size_of::<readstat_writer_s>() - 632usize];
    ["Alignment of readstat_writer_s"][::std::mem::align_of::<readstat_writer_s>() - 8usize];
    ["Offset of field: readstat_writer_s::data_writer"]
        [::std::mem::offset_of!(readstat_writer_s, data_writer) - 0usize];
    ["Offset of field: readstat_writer_s::bytes_written"]
        [::std::mem::offset_of!(readstat_writer_s, bytes_written) - 8usize];
    ["Offset of field: readstat_writer_s::version"]
        [::std::mem::offset_of!(readstat_writer_s, version) - 16usize];
    ["Offset of field: readstat_writer_s::is_64bit"]
        [::std::mem::offset_of!(readstat_writer_s, is_64bit) - 24usize];
    ["Offset of field: readstat_writer_s::compression"]
        [::std::mem::offset_of!(readstat_writer_s, compression) - 28usize];
    ["Offset of field: readstat_writer_s::timestamp"]
        [::std::mem::offset_of!(readstat_writer_s, timestamp) - 32usize];
    ["Offset of field: readstat_writer_s::variables"]
        [::std::mem::offset_of!(readstat_writer_s, variables) - 40usize];
    ["Offset of field: readstat_writer_s::variables_count"]
        [::std::mem::offset_of!(readstat_writer_s, variables_count) - 48usize];
    ["Offset of field: readstat_writer_s::variables_capacity"]
        [::std::mem::offset_of!(readstat_writer_s, variables_capacity) - 56usize];
    ["Offset of field: readstat_writer_s::label_sets"]
        [::std::mem::offset_of!(readstat_writer_s, label_sets) - 64usize];
    ["Offset of field: readstat_writer_s::label_sets_count"]
        [::std::mem::offset_of!(readstat_writer_s, label_sets_count) - 72usize];
    ["Offset of field: readstat_writer_s::label_sets_capacity"]
        [::std::mem::offset_of!(readstat_writer_s, label_sets_capacity) - 80usize];
    ["Offset of field: readstat_writer_s::notes"]
        [::std::mem::offset_of!(readstat_writer_s, notes) - 88usize];
    ["Offset of field: readstat_writer_s::notes_count"]
        [::std::mem::offset_of!(readstat_writer_s, notes_count) - 96usize];
    ["Offset of field: readstat_writer_s::notes_capacity"]
        [::std::mem::offset_of!(readstat_writer_s, notes_capacity) - 104usize];
    ["Offset of field: readstat_writer_s::string_refs"]
        [::std::mem::offset_of!(readstat_writer_s, string_refs) - 112usize];
    ["Offset of field: readstat_writer_s::string_refs_count"]
        [::std::mem::offset_of!(readstat_writer_s, string_refs_count) - 120usize];
    ["Offset of field: readstat_writer_s::string_refs_capacity"]
        [::std::mem::offset_of!(readstat_writer_s, string_refs_capacity) - 128usize];
    ["Offset of field: readstat_writer_s::row"]
        [::std::mem::offset_of!(readstat_writer_s, row) - 136usize];
    ["Offset of field: readstat_writer_s::row_len"]
        [::std::mem::offset_of!(readstat_writer_s, row_len) - 144usize];
    ["Offset of field: readstat_writer_s::row_count"]
        [::std::mem::offset_of!(readstat_writer_s, row_count) - 152usize];
    ["Offset of field: readstat_writer_s::current_row"]
        [::std::mem::offset_of!(readstat_writer_s, current_row) - 156usize];
    ["Offset of field: readstat_writer_s::file_label"]
        [::std::mem::offset_of!(readstat_writer_s, file_label) - 160usize];
    ["Offset of field: readstat_writer_s::table_name"]
        [::std::mem::offset_of!(readstat_writer_s, table_name) - 417usize];
    ["Offset of field: readstat_writer_s::fweight_variable"]
        [::std::mem::offset_of!(readstat_writer_s, fweight_variable) - 456usize];
    ["Offset of field: readstat_writer_s::callbacks"]
        [::std::mem::offset_of!(readstat_writer_s, callbacks) - 464usize];
    ["Offset of field: readstat_writer_s::error_handler"]
        [::std::mem::offset_of!(readstat_writer_s, error_handler) - 600usize];
    ["Offset of field: readstat_writer_s::module_ctx"]
        [::std::mem::offset_of!(readstat_writer_s, module_ctx) - 608usize];
    ["Offset of field: readstat_writer_s::user_ctx"]
        [::std::mem::offset_of!(readstat_writer_s, user_ctx) - 616usize];
    ["Offset of field: readstat_writer_s::initialized"]
        [::std::mem::offset_of!(readstat_writer_s, initialized) - 624usize];
};
pub type readstat_writer_t = readstat_writer_s;
extern "C" {
    pub fn readstat_writer_init() -> *mut readstat_writer_t;
}
extern "C" {
    pub fn readstat_set_data_writer(
        writer: *mut readstat_writer_t,
        data_writer: readstat_data_writer,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_add_label_set(
        writer: *mut readstat_writer_t,
        type_: readstat_type_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut readstat_label_set_t;
}
extern "C" {
    pub fn readstat_label_double_value(
        label_set: *mut readstat_label_set_t,
        value: f64,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readstat_label_int32_value(
        label_set: *mut readstat_label_set_t,
        value: i32,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readstat_label_string_value(
        label_set: *mut readstat_label_set_t,
        value: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readstat_label_tagged_value(
        label_set: *mut readstat_label_set_t,
        tag: ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readstat_add_variable(
        writer: *mut readstat_writer_t,
        name: *const ::std::os::raw::c_char,
        type_: readstat_type_t,
        storage_width: usize,
    ) -> *mut readstat_variable_t;
}
extern "C" {
    pub fn readstat_variable_set_label(
        variable: *mut readstat_variable_t,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readstat_variable_set_format(
        variable: *mut readstat_variable_t,
        format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readstat_variable_set_label_set(
        variable: *mut readstat_variable_t,
        label_set: *mut readstat_label_set_t,
    );
}
extern "C" {
    pub fn readstat_variable_set_measure(
        variable: *mut readstat_variable_t,
        measure: readstat_measure_t,
    );
}
extern "C" {
    pub fn readstat_variable_set_alignment(
        variable: *mut readstat_variable_t,
        alignment: readstat_alignment_t,
    );
}
extern "C" {
    pub fn readstat_variable_set_display_width(
        variable: *mut readstat_variable_t,
        display_width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn readstat_variable_add_missing_double_value(
        variable: *mut readstat_variable_t,
        value: f64,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_variable_add_missing_double_range(
        variable: *mut readstat_variable_t,
        lo: f64,
        hi: f64,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_variable_add_missing_string_value(
        variable: *mut readstat_variable_t,
        value: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_variable_add_missing_string_range(
        variable: *mut readstat_variable_t,
        lo: *const ::std::os::raw::c_char,
        hi: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_get_variable(
        writer: *mut readstat_writer_t,
        index: ::std::os::raw::c_int,
    ) -> *mut readstat_variable_t;
}
extern "C" {
    pub fn readstat_add_note(writer: *mut readstat_writer_t, note: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn readstat_add_string_ref(
        writer: *mut readstat_writer_t,
        string: *const ::std::os::raw::c_char,
    ) -> *mut readstat_string_ref_t;
}
extern "C" {
    pub fn readstat_get_string_ref(
        writer: *mut readstat_writer_t,
        index: ::std::os::raw::c_int,
    ) -> *mut readstat_string_ref_t;
}
extern "C" {
    pub fn readstat_writer_set_file_label(
        writer: *mut readstat_writer_t,
        file_label: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_file_timestamp(
        writer: *mut readstat_writer_t,
        timestamp: time_t,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_fweight_variable(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_file_format_version(
        writer: *mut readstat_writer_t,
        file_format_version: u8,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_table_name(
        writer: *mut readstat_writer_t,
        table_name: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_file_format_is_64bit(
        writer: *mut readstat_writer_t,
        is_64bit: ::std::os::raw::c_int,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_compression(
        writer: *mut readstat_writer_t,
        compression: readstat_compress_t,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_set_error_handler(
        writer: *mut readstat_writer_t,
        error_handler: readstat_error_handler,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_writing_dta(
        writer: *mut readstat_writer_t,
        user_ctx: *mut ::std::os::raw::c_void,
        row_count: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_writing_por(
        writer: *mut readstat_writer_t,
        user_ctx: *mut ::std::os::raw::c_void,
        row_count: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_writing_sas7bcat(
        writer: *mut readstat_writer_t,
        user_ctx: *mut ::std::os::raw::c_void,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_writing_sas7bdat(
        writer: *mut readstat_writer_t,
        user_ctx: *mut ::std::os::raw::c_void,
        row_count: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_writing_sav(
        writer: *mut readstat_writer_t,
        user_ctx: *mut ::std::os::raw::c_void,
        row_count: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_writing_xport(
        writer: *mut readstat_writer_t,
        user_ctx: *mut ::std::os::raw::c_void,
        row_count: ::std::os::raw::c_long,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_validate_metadata(writer: *mut readstat_writer_t) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_validate_variable(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_begin_row(writer: *mut readstat_writer_t) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_int8_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        value: i8,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_int16_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        value: i16,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_int32_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        value: i32,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_float_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        value: f32,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_double_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        value: f64,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_string_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        value: *const ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_string_ref(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        ref_: *mut readstat_string_ref_t,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_missing_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_insert_tagged_missing_value(
        writer: *mut readstat_writer_t,
        variable: *const readstat_variable_t,
        tag: ::std::os::raw::c_char,
    ) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_end_row(writer: *mut readstat_writer_t) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_end_writing(writer: *mut readstat_writer_t) -> readstat_error_t;
}
extern "C" {
    pub fn readstat_writer_free(writer: *mut readstat_writer_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
